//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatServer.ChatClientReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatClientReference.IChatClient")]
    public interface IChatClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatClient/SendMessage", ReplyAction="http://tempuri.org/IChatClient/SendMessageResponse")]
        void SendMessage(string user, string msg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatClient/SendMessage", ReplyAction="http://tempuri.org/IChatClient/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string user, string msg, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatClientChannel : IChatClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClientClient : System.ServiceModel.ClientBase<IChatClient>, IChatClient {
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        public ChatClientClient() {
        }
        
        public ChatClientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public void SendMessage(string user, string msg) {
            base.Channel.SendMessage(user, msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessage(string user, string msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(user, msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string msg = ((string)(inValues[1]));
            return this.BeginSendMessage(user, msg, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            this.EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string user, string msg) {
            this.SendMessageAsync(user, msg, null);
        }
        
        public void SendMessageAsync(string user, string msg, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        user,
                        msg}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
    }
}
