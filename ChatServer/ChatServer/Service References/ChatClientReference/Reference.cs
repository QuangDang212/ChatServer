//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatServer.ChatClientReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatClientReference.IChatClient")]
    public interface IChatClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatClient/ReceiveMessage", ReplyAction="http://tempuri.org/IChatClient/ReceiveMessageResponse")]
        void ReceiveMessage(string user, string msg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChatClient/ReceiveMessage", ReplyAction="http://tempuri.org/IChatClient/ReceiveMessageResponse")]
        System.IAsyncResult BeginReceiveMessage(string user, string msg, System.AsyncCallback callback, object asyncState);
        
        void EndReceiveMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatClientChannel : IChatClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClientClient : System.ServiceModel.ClientBase<IChatClient>, IChatClient {
        
        private BeginOperationDelegate onBeginReceiveMessageDelegate;
        
        private EndOperationDelegate onEndReceiveMessageDelegate;
        
        private System.Threading.SendOrPostCallback onReceiveMessageCompletedDelegate;
        
        public ChatClientClient() {
        }
        
        public ChatClientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReceiveMessageCompleted;
        
        public void ReceiveMessage(string user, string msg) {
            base.Channel.ReceiveMessage(user, msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReceiveMessage(string user, string msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReceiveMessage(user, msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReceiveMessage(System.IAsyncResult result) {
            base.Channel.EndReceiveMessage(result);
        }
        
        private System.IAsyncResult OnBeginReceiveMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string msg = ((string)(inValues[1]));
            return this.BeginReceiveMessage(user, msg, callback, asyncState);
        }
        
        private object[] OnEndReceiveMessage(System.IAsyncResult result) {
            this.EndReceiveMessage(result);
            return null;
        }
        
        private void OnReceiveMessageCompleted(object state) {
            if ((this.ReceiveMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReceiveMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReceiveMessageAsync(string user, string msg) {
            this.ReceiveMessageAsync(user, msg, null);
        }
        
        public void ReceiveMessageAsync(string user, string msg, object userState) {
            if ((this.onBeginReceiveMessageDelegate == null)) {
                this.onBeginReceiveMessageDelegate = new BeginOperationDelegate(this.OnBeginReceiveMessage);
            }
            if ((this.onEndReceiveMessageDelegate == null)) {
                this.onEndReceiveMessageDelegate = new EndOperationDelegate(this.OnEndReceiveMessage);
            }
            if ((this.onReceiveMessageCompletedDelegate == null)) {
                this.onReceiveMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReceiveMessageCompleted);
            }
            base.InvokeAsync(this.onBeginReceiveMessageDelegate, new object[] {
                        user,
                        msg}, this.onEndReceiveMessageDelegate, this.onReceiveMessageCompletedDelegate, userState);
        }
    }
}
